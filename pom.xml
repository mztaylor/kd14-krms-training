<!-- Copyright 2005-2012 The Kuali Foundation Licensed under the Educational 
	Community License, Version 2.0 (the "License"); you may not use this file 
	except in compliance with the License. You may obtain a copy of the License 
	at http://www.opensource.org/licenses/ecl2.php Unless required by applicable 
	law or agreed to in writing, software distributed under the License is distributed 
	on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
	express or implied. See the License for the specific language governing permissions 
	and limitations under the License. -->


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<name>The krworkshop Application</name>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.kuali.rice</groupId>
	<artifactId>krworkshop</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <tools.jar.path>${java.home}/../lib/tools.jar</tools.jar.path>
		<!-- database setup configuration -->
		<!-- provides ability to setup the rice and any necessary training tables 
			from maven -->
		<oracle.jdbc.version>10.2.0.3.0</oracle.jdbc.version>
		<oracle.jdbc.artifactId>ojdbc14</oracle.jdbc.artifactId>

		<mysql.jdbc.groupId>mysql</mysql.jdbc.groupId>
		<mysql.jdbc.version>5.1.18</mysql.jdbc.version>
		<mysql.jdbc.artifactId>mysql-connector-java</mysql.jdbc.artifactId>

		<jdbc.groupId>${mysql.jdbc.groupId}</jdbc.groupId>
		<jdbc.artifactId>${mysql.jdbc.artifactId}</jdbc.artifactId>
		<jdbc.version>${mysql.jdbc.version}</jdbc.version>

		<sql.plugin.escapeProcessing>false</sql.plugin.escapeProcessing>
		<sql.plugin.enableAnonymousPassword>true</sql.plugin.enableAnonymousPassword>
		<sql.plugin.orderFile>ascending</sql.plugin.orderFile>
		<sql.plugin.keepFormat>true</sql.plugin.keepFormat>
		<sql.plugin.printResultSet>false</sql.plugin.printResultSet>
		<sql.plugin.delimiter.type>row</sql.plugin.delimiter.type>
		<sql.plugin.force.execution>false</sql.plugin.force.execution>
		<sql.plugin.skip>false</sql.plugin.skip>

		<!--dependency versions -->
		<jsp-api.version>2.1</jsp-api.version>
		<junit.version>4.10</junit.version>
		<rice.groupId>org.kuali.rice</rice.groupId>
		<rice.version>2.5.1-SNAPSHOT</rice.version>
		<tools.jar.version>1.7</tools.jar.version>
		<servlet-api.version>2.5</servlet-api.version>

		<!--plugin versions -->
		<!-- It is a good idea to explicitly place plugin version numbers in a 
			build. This makes the build more stable and less dependant on a specific 
			version of maven. -->
		<plugin.build-helper.version>1.7</plugin.build-helper.version>
		<plugin.compiler.version>2.5.1</plugin.compiler.version>
		<plugin.surefire.version>2.12.3</plugin.surefire.version>
		<plugin.failsafe.version>2.12.3</plugin.failsafe.version>
		<plugin.ingester.version>1.0.6-beta</plugin.ingester.version>
		<plugin.war.version>2.2</plugin.war.version>
		<plugin.jetty.version>8.1.7.v20120910</plugin.jetty.version>

		<!-- other properties -->
		<jetty.port>8080</jetty.port>
		<maven.failsafe.skip>true</maven.failsafe.skip>
		<plugin.compiler.source>1.6</plugin.compiler.source>
		<plugin.compiler.target>1.6</plugin.compiler.target>

		<!-- training solutions -->
		<training.db.solution.sql></training.db.solution.sql>		
		<training.db.solution1.sql>src/main/config/workflow/db/${db.vendor}/solutions/001-solution.sql</training.db.solution1.sql>
		<training.db.solution2.sql>src/main/config/workflow/db/${db.vendor}/solutions/002-solution.sql</training.db.solution2.sql>
		<training.db.solution3.sql>src/main/config/workflow/db/${db.vendor}/solutions/003-solution.sql</training.db.solution3.sql>
		<training.db.solution4.sql>src/main/config/workflow/db/${db.vendor}/solutions/004-solution.sql</training.db.solution4.sql>
		<training.db.solution5.sql>src/main/config/workflow/db/${db.vendor}/solutions/005-solution.sql</training.db.solution5.sql>
	</properties>

	<repositories>
		<repository>
			<id>kuali-public</id>
			<url>http://nexus.kuali.org/content/groups/public</url>
		</repository>
	</repositories>

	<build>
		<!-- To help manage complex builds, the maven enforcer plugin has many 
			useful rules. This is not configured in this sample pom for simplicity sake. 
			http://maven.apache.org/plugins/maven-enforcer-plugin/ -->
		<plugins>

			<!-- Compiler plugin to specify Java source and target versions and encoding -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${plugin.compiler.version}</version>
				<configuration>
					<source>${plugin.compiler.source}</source>
					<target>${plugin.compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- Using war overlays to extract the web content from the rice web module. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${plugin.war.version}</version>
				<configuration>
					<overlays>
						<overlay>
							<groupId>org.kuali.rice</groupId>
							<artifactId>rice-web</artifactId>
							<filtered>false</filtered>
						</overlay>
					</overlays>
				</configuration>
			</plugin>

			<!-- Adds a new source directory for integration tests. In order for the 
				buildhelper plugin to work with eclipse and m2e, an m2e-extra eclipse plugin 
				must be installed called: org.sonatype.m2e.buildhelper. This is the case 
				until the buildhelper plugin directly supports m2e http://stackoverflow.com/questions/8212846/cant-install-eclipse-plugin-m2e-connector-for-build-helper-maven-plugin-0-15-0 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${plugin.build-helper.version}</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- This executes unit tests. These tests are executed by default when 
				the project is built. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${plugin.surefire.version}</version>
			</plugin>

			<!-- This allows the application be be launched in a jetty server using 
				a maven command. A tomcat plugin could also be configured and used if desired. -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${plugin.jetty.version}</version>
				<configuration>
					<webAppConfig>
						<contextPath>/krworkshop</contextPath>
					</webAppConfig>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>${jetty.port}</port>
						</connector>
					</connectors>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
						<scope>runtime</scope>
					</dependency>
					<dependency>
						<groupId>org.springframework</groupId>
						<artifactId>spring-instrument</artifactId>
						<version>3.2.4.RELEASE</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>add-test-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.kuali.maven.plugins</groupId>
					<artifactId>sql-maven-plugin</artifactId>
					<version>1.0.10</version>
					<configuration>
						<username>${impex.username}</username>
						<password>${impex.password}</password>
						<url>${impex.url}</url>
						<driver>${impex.driver}</driver>
						<delimiter>;</delimiter>
						<delimiterType>normal</delimiterType>
						<forceMojoExecution>${sql.plugin.force.execution}</forceMojoExecution>
						<skip>${sql.plugin.skip}</skip>
						<keepFormat>${sql.plugin.keepFormat}</keepFormat>
						<printResultSet>${sql.plugin.printResultSet}</printResultSet>
						<outputFile>${sql.plugin.outputFile}</outputFile>
						<orderFile>${sql.plugin.orderFile}</orderFile>
						<escapeProcessing>${sql.plugin.escapeProcessing}</escapeProcessing>
						<enableAnonymousPassword>${sql.plugin.enableAnonymousPassword}</enableAnonymousPassword>
					</configuration>
					<executions>
						<execution>
							<id>setup</id>
							<phase>none</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<url>${impex.dba.url}</url>
								<username>${impex.dba.username}</username>
								<password>${impex.dba.password}</password>
								<srcFiles>
									<srcFile>src/main/config/shared/db/${db.vendor}/setup/000-rice-db-232.sql</srcFile>
									<srcFile>src/main/config/shared/db/${db.vendor}/setup/001-namespace.sql</srcFile>									
								</srcFiles>
							</configuration>
						</execution>
						<execution>
							<id>setup-2</id>
							<phase>none</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<url>${impex.url}</url>
								<username>${impex.username}</username>
								<password>${impex.password}</password>
								<srcFiles>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/001-dataobjects.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/002-namespace.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/003-roles.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/004-permissions.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/005-responsibilities.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/006-role-members.sql</srcFile>
								</srcFiles>
							</configuration>
						</execution>
            <execution>
              <id>setup-3</id>
              <phase>none</phase>
              <goals>
                <goal>execute</goal>
              </goals>
              <configuration>
                <url>${impex.url}</url>
                <username>${impex.username}</username>
                <password>${impex.password}</password>
                <srcFiles>
                  <srcFile>src/main/config/rules/db/${db.vendor}/setup/001-dataobjects.sql</srcFile>
                  <srcFile>src/main/config/rules/db/${db.vendor}/setup/003-context.sql</srcFile>
                  <srcFile>src/main/config/rules/db/${db.vendor}/setup/004-permissions.sql</srcFile>
                  <srcFile>src/main/config/rules/db/${db.vendor}/setup/005-term-specification.sql</srcFile>
                  <srcFile>src/main/config/rules/db/${db.vendor}/setup/006-wf-prereqs.sql</srcFile>
                  <srcFile>src/main/config/rules/db/${db.vendor}/setup/007-wf-givens.sql</srcFile>
                </srcFiles>
              </configuration>
            </execution>
						<execution>
							<id>setup-krms</id>
							<phase>none</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<url>${impex.url}</url>
								<username>${impex.username}</username>
								<password>${impex.password}</password>
								<srcFiles>
									<srcFile>src/main/config/workflow/db/${db.vendor}/setup/001-databojects.sql</srcFile>
								</srcFiles>
							</configuration>
						</execution>						
						<execution>
							<id>roleupdate</id>
							<phase>none</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<url>${impex.url}</url>
								<username>${impex.username}</username>
								<password>${impex.password}</password>
								<srcFiles>
									<srcFile>src/main/config/workflow/db/${db.vendor}/updates/003-roles.sql</srcFile>
								</srcFiles>
							</configuration>
						</execution>
						<execution>
							<id>update</id>
							<phase>none</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<url>${impex.url}</url>
								<username>${impex.username}</username>
								<password>${impex.password}</password>
								<srcFiles>
									<srcFile>src/main/config/workflow/db/${db.vendor}/updates/003-roles.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/updates/005-responsibilities.sql</srcFile>
									<srcFile>src/main/config/workflow/db/${db.vendor}/updates/006-role-members.sql</srcFile>
								</srcFiles>
							</configuration>
						</execution>
						<execution>
							<id>solution</id>
							<phase>none</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<url>${impex.url}</url>
								<username>${impex.username}</username>
								<password>${impex.password}</password>
								<srcFiles>
									<srcFile>${training.db.solution.sql}</srcFile>
								</srcFiles>
							</configuration>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>${jdbc.groupId}</groupId>
							<artifactId>${jdbc.artifactId}</artifactId>
							<version>${jdbc.version}</version>
						</dependency>
					</dependencies>
				</plugin>

				<!-- Ingester plugin to specify workflow configuration files to ingest -->
				<plugin>
					<groupId>org.kuali.maven.plugins</groupId>
					<artifactId>ingester-maven-plugin</artifactId>
					<version>${plugin.ingester.version}</version>
					<configuration>
						<jdbcUrl>${impex.url}</jdbcUrl>
						<jdbcUsername>${impex.username}</jdbcUsername>
						<jdbcPassword>${impex.password}</jdbcPassword>
						<jdbcVendor>${db.vendor}</jdbcVendor>
						<namespace>rsk</namespace>
					</configuration>
					<executions>
						<execution>
							<id>setup-workflow</id>
							<phase>none</phase>
							<goals>
								<goal>ingest</goal>
							</goals>
							<configuration>
								<sourceDir>${project.basedir}/src/main/config/workflow/setup/</sourceDir>
							</configuration>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>${jdbc.groupId}</groupId>
							<artifactId>${jdbc.artifactId}</artifactId>
							<version>${jdbc.version}</version>
						</dependency>
					</dependencies>
				</plugin>

			</plugins>
		</pluginManagement>
	</build>

	<!-- This is a profile activate and enables a special build configuration 
		when executing integration tests. The profile is activated by setting the 
		property maven.failsafe.skip to false. -->
	<profiles>
		<profile>
	      <id>osx_profile</id>
	      <activation>
	        <os>
	          <family>mac</family>
	        </os>
	      </activation>
	      <properties>
	        <tools.jar.path>${java.home}/../lib/tools.jar</tools.jar.path>
	      </properties>
	    </profile>
		<profile>
			<id>mysql</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<db.vendor>mysql</db.vendor>
				<impex.driver>com.mysql.jdbc.Driver</impex.driver>
				<impex.database>ricetraining</impex.database>
				<impex.dba.username>root</impex.dba.username>
				<impex.dba.password>NONE</impex.dba.password>
				<impex.username>ricetraining</impex.username>
				<impex.password>ricetraining</impex.password>
				<impex.dba.url>jdbc:mysql://localhost:3306</impex.dba.url>
				<impex.url>${impex.dba.url}/${impex.database}</impex.url>
				<jdbc.groupId>mysql</jdbc.groupId>
				<jdbc.artifactId>${mysql.jdbc.artifactId}</jdbc.artifactId>
				<jdbc.version>${mysql.jdbc.version}</jdbc.version>
			</properties>
		</profile>

		<profile>
			<id>setup-workflow</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.kuali.maven.plugins</groupId>
						<artifactId>ingester-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>setup-workflow</id>
								<phase>install</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- database setup profile: handles installation of training application 
			tables and data -->
		<profile>
			<id>setup</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<sql.plugin.force.execution>true</sql.plugin.force.execution>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.kuali.maven.plugins</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>setup</id>
								<phase>install</phase>
							</execution>
							<execution>
								<id>setup-2</id>
								<phase>install</phase>
							</execution>
              <execution>
                <id>setup-3</id>
                <phase>install</phase>
              </execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>default-war</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<executions>
							<execution>
								<id>default-install</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>roleupdate</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<sql.plugin.force.execution>true</sql.plugin.force.execution>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.kuali.maven.plugins</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>roleupdate</id>
								<phase>install</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>default-war</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<executions>
							<execution>
								<id>default-install</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>update</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<sql.plugin.force.execution>true</sql.plugin.force.execution>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.kuali.maven.plugins</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>update</id>
								<phase>install</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>default-war</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<executions>
							<execution>
								<id>default-install</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
		<id>solution1</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<training.db.solution.sql>${training.db.solution1.sql}</training.db.solution.sql>		
			</properties>
		</profile>
		<profile>
		<id>solution2</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<training.db.solution.sql>${training.db.solution2.sql}</training.db.solution.sql>		
			</properties>
		</profile>
		<profile>
		<id>solution3</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<training.db.solution.sql>${training.db.solution3.sql}</training.db.solution.sql>		
			</properties>
		</profile>
		<profile>
		<id>solution4</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<training.db.solution.sql>${training.db.solution4.sql}</training.db.solution.sql>		
			</properties>
		</profile>
		<profile>
		<id>solution5</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<training.db.solution.sql>${training.db.solution5.sql}</training.db.solution.sql>		
			</properties>
		</profile>
		<profile>
			<id>solution</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<sql.plugin.force.execution>true</sql.plugin.force.execution>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.kuali.maven.plugins</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>setup</id>
								<phase>install</phase>
							</execution>
              <execution>
                <id>setup-2</id>
                <phase>install</phase>
              </execution>
              <execution>
                <id>setup-3</id>
                <phase>install</phase>
              </execution>
							<execution>
								<id>solution</id>
								<phase>install</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>default-war</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<executions>
							<execution>
								<id>default-install</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>itests</id>
			<activation>
				<property>
					<name>maven.failsafe.skip</name>
					<value>false</value>
				</property>
			</activation>
			<properties>
				<jetty.stop.port>9999</jetty.stop.port>
			</properties>
			<build>
				<plugins>

					<!-- This executes integration tests. These tests are NOT executed by 
						default when the project is built. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${plugin.failsafe.version}</version>
						<executions>
							<execution>
								<id>integration-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<skip>${maven.failsafe.skip}</skip>
							<failIfNoTests>false</failIfNoTests>
							<includes>
								<include>**/*IT.java</include>
							</includes>
							<systemPropertyVariables>
								<test.port>${jetty.port}</test.port>
							</systemPropertyVariables>
						</configuration>
					</plugin>

					<!-- This configures jetty to startup and shut down for integration 
						tests. This allows integration tests to call into the application using web 
						requests. A tomcat plugin could also be configured and used if desired. -->
					<plugin>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<version>${plugin.jetty.version}</version>
						<configuration>
							<webAppConfig>
								<contextPath>/krworkshop</contextPath>
							</webAppConfig>
							<connectors>
								<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
									<port>${jetty.port}</port>
								</connector>
							</connectors>
							<stopKey>stop_jetty</stopKey>
							<stopPort>${jetty.stop.port}</stopPort>
						</configuration>
						<executions>
							<execution>
								<id>start-jetty</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<scanIntervalSeconds>0</scanIntervalSeconds>
									<daemon>true</daemon>
								</configuration>
							</execution>
							<execution>
								<id>stop-jetty</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.artifactId}</artifactId>
								<version>${jdbc.version}</version>
								<scope>runtime</scope>
							</dependency>
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-instrument</artifactId>
								<version>3.2.4.RELEASE</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>

		<!-- Kuali Rice libraries Ideally you only declare the modules of rice 
			you are using. In practice, you may need to declare them all until rice's 
			modularity work is complete. The only modules rice recommends compiling against 
			are api & framework modules. It is usually a good idea to list ALL of the 
			third party libraries being directly references in code. This makes it explicit 
			which libraries are being used rather than coming in through a transitive 
			relationship with other libraries. The http://maven.apache.org/plugins/maven-dependency-plugin/ 
			does a pretty good job of finding these missing dependencies. -->
		<dependency>
			<groupId>${rice.groupId}</groupId>
			<artifactId>rice-web</artifactId>
			<version>${rice.version}</version>
			<type>war</type>
		</dependency>
		<dependency>
			<groupId>${rice.groupId}</groupId>
			<artifactId>rice-krad-development-tools</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>${rice.groupId}</groupId>
			<artifactId>rice-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>${rice.groupId}</groupId>
			<artifactId>rice-edl-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>${rice.groupId}</groupId>
			<artifactId>rice-krms-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>

	    <dependency>
	      <groupId>com.sun</groupId>
	      <artifactId>tools</artifactId>
	      <scope>system</scope>
	      <version>${tools.jar.version}</version>
	      <systemPath>${tools.jar.path}</systemPath>
	    </dependency>

		<!-- third party libraries -->

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.5</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		
	</dependencies>
</project>
